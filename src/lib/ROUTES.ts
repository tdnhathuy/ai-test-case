/* eslint-disable */
/**
 * This file was generated by 'vite-plugin-kit-routes'
 *
 *      >> DO NOT EDIT THIS FILE MANUALLY <<
 */

/**
 * PAGES
 */
const PAGES = {
  "/": `/`,
  "/category": `/category`,
  "/create-test-case": `/create-test-case`,
  "/create-test-case/step-1": `/create-test-case/step-1`,
  "/create-test-case/step-2": `/create-test-case/step-2`,
  "/create-test-case/step-3": `/create-test-case/step-3`,
  "/home": `/home`,
  "/transaction": `/transaction`,
  "/wallet": `/wallet`,
  "/auth": `/auth`
}

/**
 * SERVERS
 */
const SERVERS = {
  "GET /api/auth/session": `/api/auth/session`,
  "GET /api/auth/verify-token": `/api/auth/verify-token`,
  "GET /api/profile/category": `/api/profile/category`,
  "POST /api/profile/category": `/api/profile/category`,
  "PATCH /api/profile/category/[id]": (params: { id: (string | number) }) => {
    return `/api/profile/category/${params['id']}`
  },
  "DELETE /api/profile/category/[id]": (params: { id: (string | number) }) => {
    return `/api/profile/category/${params['id']}`
  },
  "GET /api/profile/icon": `/api/profile/icon`,
  "GET /api/profile/setup": `/api/profile/setup`,
  "GET /api/profile/transaction": `/api/profile/transaction`,
  "POST /api/profile/transaction": `/api/profile/transaction`,
  "GET /api/profile/wallet": `/api/profile/wallet`,
  "POST /api/profile/wallet": `/api/profile/wallet`,
  "PATCH /api/profile/wallet/[id]": (params: { id: (string | number) }) => {
    return `/api/profile/wallet/${params['id']}`
  },
  "DELETE /api/profile/wallet/[id]": (params: { id: (string | number) }) => {
    return `/api/profile/wallet/${params['id']}`
  }
}

/**
 * ACTIONS
 */
const ACTIONS = {
  "default /signin": `/signin`,
  "default /signout": `/signout`
}

/**
 * LINKS
 */
const LINKS = {
  
}

type ParamValue = string | number | boolean | null | undefined

/**
 * Append search params to a string
 */
export const appendSp = (
  sp?: Record<string, ParamValue | ParamValue[]>,
  prefix: '?' | '&' = '?',
) => {
  if (sp === undefined) return ''

  const params = new URLSearchParams()
  const append = (n: string, v: ParamValue) => {
    if (v !== undefined) {
      params.append(n, String(v))
    }
  }

  let anchor = ''
  for (const [name, val] of Object.entries(sp)) {
    if (name === '__KIT_ROUTES_ANCHOR__' && val !== undefined) {
      anchor = `#${val}`
      continue
    }
    if (Array.isArray(val)) {
      for (const v of val) {
        append(name, v)
      }
    } else {
      append(name, val)
    }
  }

  const formatted = params.toString()
  if (formatted || anchor) {
    return `${prefix}${formatted}${anchor}`.replace('?#', '#')
  }
  return ''
}

/**
 * get the current search params
 * 
 * Could be use like this:
 * ```
 * route("/cities", { page: 2 }, { ...currentSP() })
 * ```
 */ 
export const currentSp = () => {
  const params = new URLSearchParams(window.location.search)
  const record: Record<string, string> = {}
  for (const [key, value] of params.entries()) {
    record[key] = value
  }
  return record
}

/* type helpers for route function */
type NonFunctionKeys<T> = { [K in keyof T]: T[K] extends Function ? never : K }[keyof T]
type FunctionKeys<T> = { [K in keyof T]: T[K] extends Function ? K : never }[keyof T]
type FunctionParams<T> = T extends (...args: infer P) => any ? P : never

const AllObjs = { ...PAGES, ...ACTIONS, ...SERVERS, ...LINKS }
type AllTypes = typeof AllObjs

export type Routes = keyof AllTypes extends `${string}/${infer Route}` ? `/${Route}` : keyof AllTypes
export const routes = [
	...new Set(Object.keys(AllObjs).map((route) => /^\/.*|[^ ]?\/.*$/.exec(route)?.[0] ?? route)),
] as Routes[]

/**
 * To be used like this: 
 * ```ts
 * import { route } from './ROUTES'
 * 
 * route('site_id', { id: 1 })
 * ```
 */
export function route<T extends FunctionKeys<AllTypes>>(key: T, ...params: FunctionParams<AllTypes[T]>): string
export function route<T extends NonFunctionKeys<AllTypes>>(key: T): string
export function route<T extends keyof AllTypes>(key: T, ...params: any[]): string {
  if (AllObjs[key] as any instanceof Function) {
    const element = (AllObjs as any)[key] as (...args: any[]) => string
    return element(...params)
  } else {
    return AllObjs[key] as string
  }
}

/**
* Add this type as a generic of the vite plugin `kitRoutes<KIT_ROUTES>`.
*
* Full example:
* ```ts
* import type { KIT_ROUTES } from '$lib/ROUTES'
* import { kitRoutes } from 'vite-plugin-kit-routes'
*
* kitRoutes<KIT_ROUTES>({
*  PAGES: {
*    // here, key of object will be typed!
*  }
* })
* ```
*/
export type KIT_ROUTES = {
  PAGES: { '/': never, '/category': never, '/create-test-case': never, '/create-test-case/step-1': never, '/create-test-case/step-2': never, '/create-test-case/step-3': never, '/home': never, '/transaction': never, '/wallet': never, '/auth': never }
  SERVERS: { 'GET /api/auth/session': never, 'GET /api/auth/verify-token': never, 'GET /api/profile/category': never, 'POST /api/profile/category': never, 'PATCH /api/profile/category/[id]': 'id', 'DELETE /api/profile/category/[id]': 'id', 'GET /api/profile/icon': never, 'GET /api/profile/setup': never, 'GET /api/profile/transaction': never, 'POST /api/profile/transaction': never, 'GET /api/profile/wallet': never, 'POST /api/profile/wallet': never, 'PATCH /api/profile/wallet/[id]': 'id', 'DELETE /api/profile/wallet/[id]': 'id' }
  ACTIONS: { 'default /signin': never, 'default /signout': never }
  LINKS: Record<string, never>
  Params: { 'id': never }
}
